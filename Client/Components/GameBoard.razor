@page "/game-board"
@using System.Collections.Generic
@inject GameClientLogic GameClientLogic
@inject NavigationManager NavigationManager

<link href="css/board.css" rel="stylesheet">

<aside>
    <h3>Игроки в игре</h3>

    @if (Players.Count > 1)
    {
        <ul>
            @foreach (var player in Players)
            {
                @if (CurrentPlayer == player)
                {
                    <li style="background-color: lightgray">@player (@DiceCount[player])</li>
                }
                else
                {
                    <li>@player (@DiceCount[player])</li>
                }
            }
        </ul>
    }
    else if (Players.Count == 1)
    {
        <p>Для игры необходимо минимум 2 игрока...</p>
        <ul>

            <li>@Players[0]</li>
        </ul>
    }
    else
    {
        <p>Для игры необходимо минимум 2 игрока...</p>
    }
</aside>

<section>
    @if (!gameStarted)
    {
        <h3 id="startGame">Игра началась</h3>
        <h3 id="diceCount">Осталось костей: @DiceCount[PlayerName]</h3>
        @if (!roundStarted)
        {
            <h3 id="myDiceCount">Ваши кости: @MyDice</h3>
            @if (CurrentBet == null)
            {
                <h3 id="bet">Текущая ставка: Ставка не сделана</h3>
            }
            else
            {
                <h3 id="bet">Текущая ставка: @CurrentBet[1] костей со значением @CurrentBet[0]</h3>
            }

            @if (IsMyTurn)
            {
                <div class="selectNumber">
                    <label>Число на кубике:</label>
                    <select @bind="SelectedNumber">
                        @foreach (var number in Enumerable.Range(1, 6))
                        {
                            <option value="@number">@number</option>
                        }
                    </select>
                </div>
                <div class="selectNumber">
                    <label>Количество кубиков:</label>
                    <select @bind="SelectedCount">
                        @foreach (var count in GetValidCounts())
                        {
                            <option value="@count">@count</option>
                        }
                    </select>
                </div>
            }
            else
            {
                <p id="notYourTurn">Сейчас не ваш ход или ставка уже сделана.</p>
            }

            <button @onclick="PlaceBet" hidden="@(gameStarted || roundStarted)" disabled="@(!IsBetValid() || !IsMyTurn)" class="button">Сделать ставку</button>
            <button @onclick="Doodoo" hidden="@(gameStarted || roundStarted)" disabled="@(!IsMyTurn || CurrentBet == null)" class="button">Объявить Doodoo</button>
        }
        else
        {
            <button @onclick="StartRound" hidden="@(gameStarted || !roundStarted || EndOfGame)" disabled="@(!IsMyTurn)" class="button">Начать новый раунд</button>
        }

        <div id="chatContainer">
            <p>Чат</p>
            <pre>@Chat</pre>
        </div>

        @if (EndOfGame)
        {
            <button @onclick="OnStartNewGame" class="button">Начать новую игру</button>
        }
    }
    else
    {
        <button @onclick="SetReady" hidden="@(!gameStarted)" disabled="@(IsReady || Players.Count < 2)" class="button">Начать игру</button>
    }
</section>

@code {
    private List<string> Players = new();
    private Dictionary<string, int> DiceCount = new();
    private string MyDice = "";
    private string CurrentPlayer = "";
    private string PlayerName = "";
    private bool IsMyTurn => PlayerName == CurrentPlayer;
    private bool IsReady = false;
    private bool gameStarted = true;
    private bool roundStarted = true;
    private bool EndOfGame = false;
    private List<int> CurrentBet { get; set; } = null;

    private string Chat = "";

    private int SelectedNumber { get; set; } = 1;
    private int SelectedCount { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("name", out var value))
        {
            PlayerName = value;
        }

        await GameClientLogic.PlayersListAskAsync();

        GameClientLogic.OnPlayerListUpdated += OnPlayerListUpdated;
        GameClientLogic.OnTurnOrderDetermined += OnTurnOrderDetermined;
        GameClientLogic.OnTurnChanged += OnTurnChanged;
        GameClientLogic.OnReadyConfirmed += OnReadyConfirmed;
        GameClientLogic.OnChatUpdated += OnChatUpdated;
        GameClientLogic.OnDiceUpdated += OnDiceUpdated;
        GameClientLogic.OnBetUpdated += OnBetUpdated;
        GameClientLogic.OnDicesCountUpdated += OnDicesCountUpdated;
        GameClientLogic.OnEndGame += OnEndGame;
    }

    private Task OnEndGame()
    {
        EndOfGame = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnStartNewGame()
    {
        EndOfGame = false;
        gameStarted = true;
        IsReady = false;
        Chat = "";
        foreach (var pl in Players)
        {
            DiceCount[pl] = 1;
        }
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void OnPlayerListUpdated(List<string> updatedPlayers)
    {
        Players = updatedPlayers;
        foreach (var pl in updatedPlayers)
        {
            DiceCount[pl] = 1;
        }
        StateHasChanged();
    }

    private Task OnDiceUpdated(List<int> dice)
    {
        roundStarted = false;
        MyDice = "";
        foreach (var item in dice)
        {
            MyDice += item + " ";
        }
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnDicesCountUpdated(Dictionary<string, int> diceCount)
    {
        //Console.WriteLine("change");
        roundStarted = true;
        CurrentBet = null;
        MyDice = "";
        DiceCount = diceCount;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnBetUpdated(List<int> bet)
    {
        CurrentBet = bet;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnTurnOrderDetermined(List<string> players, string currentPlayer)
    {
        Players = players;
        gameStarted = false;
        CurrentPlayer = currentPlayer;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnTurnChanged(string currentPlayer)
    {
        CurrentPlayer = currentPlayer;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task PlaceBet()
    {
        await GameClientLogic.MakeMove(PlayerName, "makeBet", new List<int> { SelectedNumber, SelectedCount });
    }

    private async Task Doodoo()
    {
        await GameClientLogic.MakeMove(PlayerName, "doodoo", new List<int> { });
    }

    private async Task StartRound()
    {
        await GameClientLogic.MakeMove(PlayerName, "startRound", new List<int> {});
    }

    private Task OnReadyConfirmed()
    {
        IsReady = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task SetReady()
    {
        await GameClientLogic.SetReady();
    }

    private void OnChatUpdated(string name, string action)
    {
        Chat += $"[{name}]: {action}\n";
        StateHasChanged();
    }

    private IEnumerable<int> GetValidCounts()
    {
        if (CurrentBet == null)
        {
            return Enumerable.Range(1, 10);
        }

        return Enumerable.Range(CurrentBet[1], Math.Max(10 - CurrentBet[1] + 1, 0));
    }

    private bool IsBetValid()
    {
        if (CurrentBet == null)
        {
            return true;
        }

        return (SelectedCount > CurrentBet[1] && SelectedNumber >= CurrentBet[0])
            || (SelectedCount >= CurrentBet[1] && SelectedNumber > CurrentBet[0]);
    }

}