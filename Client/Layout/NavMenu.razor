@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims

<div>
    <div>
        <a href="">Client</a>
        <button title="Navigation menu" @onclick="ToggleNavMenu">
            <span></span>
        </button>
    </div>
</div>

<div @onclick="ToggleNavMenu">
    <nav>
        <div>
            <NavLink href="/join-game">
                <span aria-hidden="true"></span> Присоединиться
            </NavLink>
        </div>
        @if (!string.IsNullOrEmpty(UserEmail))
        {
            <div>
                <span>Logged in as: @UserEmail</span>
                <button @onclick="Logout">Logout</button>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    public string? UserEmail { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        await UpdateUserEmailAsync();
    }

    public async Task UpdateUserEmailAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("token");
        if (!string.IsNullOrEmpty(token))
        {
            UserEmail = GetEmailFromToken(token);
        }
        else
        {
            UserEmail = null;
        }

        StateHasChanged();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("token");
        UserEmail = null;
        Navigation.NavigateTo("/login");
    }

    private string? GetEmailFromToken(string token)
    {
        var jwtHandler = new JwtSecurityTokenHandler();
        var jwtToken = jwtHandler.ReadJwtToken(token);
        var emailClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email);
        return emailClaim?.Value;
    }
}